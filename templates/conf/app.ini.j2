#jinja2: trim_blocks: True, lstrip_blocks: True
; {{ ansible_managed }}

; This file lists the default values used by Gitea
;; Copy required sections to your own app.ini (default is custom/conf/app.ini)
;; and modify as needed.
;; Do not copy the whole file as-is, as it contains some invalid sections for illustrative purposes.
;; If you don't know what a setting is you should not set it.
;;
;; see https://docs.gitea.io/en-us/config-cheat-sheet/ for additional documentation.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Default Configuration (non-`app.ini` configuration)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; These values are environment-dependent but form the basis of a lot of values. They will be
;; reported as part of the default configuration when running `gitea --help` or on start-up. The order they are emitted there is slightly different but we will list them here in the order they are set-up.
;;
;; - _`AppPath`_: This is the absolute path of the running gitea binary.
;; - _`AppWorkPath`_: This refers to "working path" of the `gitea` binary. It is determined by using the first set thing in the following hierarchy:
;;   - The `--work-path` flag passed to the binary
;;   - The environment variable `$GITEA_WORK_DIR`
;;   - A built-in value set at build time (see building from source)
;;   - Otherwise it defaults to the directory of the _`AppPath`_
;;   - If any of the above are relative paths then they are made absolute against
;; the directory of the _`AppPath`_
;; - _`CustomPath`_: This is the base directory for custom templates and other options.
;; It is determined by using the first set thing in the following hierarchy:
;;   - The `--custom-path` flag passed to the binary
;;   - The environment variable `$GITEA_CUSTOM`
;;   - A built-in value set at build time (see building from source)
;;   - Otherwise it defaults to _`AppWorkPath`_`/custom`
;;   - If any of the above are relative paths then they are made absolute against the
;; the directory of the _`AppWorkPath`_
;; - _`CustomConf`_: This is the path to the `app.ini` file.
;;   - The `--config` flag passed to the binary
;;   - A built-in value set at build time (see building from source)
;;   - Otherwise it defaults to _`CustomPath`_`/conf/app.ini`
;;   - If any of the above are relative paths then they are made absolute against the
;; the directory of the _`CustomPath`_
;;
;; In addition there is _`StaticRootPath`_ which can be set as a built-in at build time, but will otherwise default to _`AppWorkPath`_

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; General Settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; App name that shows in every page title
APP_NAME = {{ gitea_name }}
;;
;; RUN_USER will automatically detect the current user - but you can set it here change it if you run locally
; RUN_USER = ; git
;;
;; Application run mode, affects performance and debugging. Either "dev", "prod" or "test", default is "prod"
RUN_MODE = {{ gitea_run_mode }}

{% if gitea_actions is defined and
      gitea_actions | count > 0 and
      gitea_actions.enabled | default('false') | bool %}
[actions]
ENABLED = {{ gitea_actions.enabled | default('false') | bool | ternary('true', 'false') }}
  {% if gitea_actions.default_actions_url is defined and
        gitea_actions.default_actions_url | string | length > 0 %}
DEFAULT_ACTIONS_URL = {{ gitea_actions.default_actions_url }}
  {% endif %}
{% endif %}

{% if gitea_admin is defined and
      gitea_admin | count > 0 %}
[admin]
  {% if gitea_admin.disable_regular_org_creation | default('') | string | length > 0 %}
DISABLE_REGULAR_ORG_CREATION = {{ gitea_admin.disable_regular_org_creation | default('false') | bool | ternary('true', 'false') }}
  {% endif %}
  {% if gitea_admin.default_email_notifications | default('') | string | length > 0 and
        gitea_admin.default_email_notifications in ["enabled", "onmention", "disabled"] %}
DEFAULT_EMAIL_NOTIFICATIONS = {{ gitea_admin.default_email_notifications }}
  {% endif %}
{% endif %}

{% if gitea_api is defined and
      gitea_api | count > 0 %}
[api]
  {% if gitea_api.enable_swagger | default('') | string | length > 0 %}
ENABLE_SWAGGER = {{ gitea_api.enable_swagger | default('false') | bool | ternary('true', 'false') }}
  {% endif %}
  {% if gitea_api.max_response_items | default('') | string | length > 0 %}
MAX_RESPONSE_ITEMS = {{ gitea_api.max_response_items }}
  {% endif %}
  {% if gitea_api.default_paging_num | default('') | string | length > 0 %}
DEFAULT_PAGING_NUM = {{ gitea_api.default_paging_num }}
  {% endif %}
  {% if gitea_api.default_git_trees_per_page | default('') | string | length > 0 %}
DEFAULT_GIT_TREES_PER_PAGE = {{ gitea_api.default_git_trees_per_page }}
  {% endif %}
  {% if gitea_api.default_max_blob_size | default('') | string | length > 0 %}
DEFAULT_MAX_BLOB_SIZE = {{ gitea_api.default_max_blob_size }}
  {% endif %}
{% endif %}

{% if gitea_attachment is defined and
      gitea_attachment | count > 0  and
      gitea_attachment.enabled | default('false') | bool %}
[attachment]
ENABLED = {{ gitea_attachment.enabled | default('false') | bool | ternary('true', 'false') }}
  {% if gitea_attachment.allowed_types is defined and
        gitea_attachment.allowed_types | count > 0 %}
ALLOWED_TYPES = {{ gitea_attachment.allowed_types | join(',') }}
  {% endif %}
  {% if gitea_attachment.max_size | default('') | string | length > 0 %}
MAX_SIZE = {{ gitea_attachment.max_size }}
  {% endif %}
  {% if gitea_attachment.max_files | default('') | string | length > 0 %}
MAX_FILES = {{ gitea_attachment.max_files }}
  {% endif %}
  {% if gitea_attachment.storage_type | default('') | string | length > 0 and
        gitea_attachment.storage_type in ["local", "minio"] %}
STORAGE_TYPE = {{ gitea_attachment.storage_type }}
  {% endif %}
  {% if gitea_attachment.storage_type | default('') | string | length > 0 and
        gitea_attachment.storage_type == "minio" and
        gitea_attachment.serve_direct | default('') | string | length > 0 %}
SERVE_DIRECT = {{ gitea_attachment.serve_direct | bool | ternary('true', 'false') }}
  {% endif %}
  {% if gitea_attachment.storage_type | default('') | string | length > 0 and
        gitea_attachment.storage_type == "local" and
        gitea_attachment.path | default('') | string | length > 0 %}
PATH = {{ gitea_attachment.path }}
  {% endif %}
  {% if gitea_attachment.storage_type | default('') | string | length > 0 and
        gitea_attachment.storage_type == "minio" and
        gitea_attachment.minio is defined and
        gitea_attachment.minio | count > 0 %}
    {% if gitea_attachment.minio.endpoint | default('') | string | length > 0 %}
MINIO_ENDPOINT = {{ gitea_attachment.minio.endpoint }}
    {% endif %}
    {% if gitea_attachment.minio.access_key_id | default('') | string | length > 0 %}
MINIO_ACCESS_KEY_ID = {{ gitea_attachment.minio.access_key_id }}
    {% endif %}
    {% if gitea_attachment.minio.secret_access_key | default('') | string | length > 0 %}
MINIO_SECRET_ACCESS_KEY = {{ gitea_attachment.minio.secret_access_key }}
    {% endif %}
    {% if gitea_attachment.minio.bucket | default('') | string | length > 0 %}
MINIO_BUCKET = {{ gitea_attachment.minio.bucket }}
    {% endif %}
    {% if gitea_attachment.minio.location | default('') | string | length > 0 %}
MINIO_LOCATION = {{ gitea_attachment.minio.location }}
    {% endif %}
    {% if gitea_attachment.minio.base_path | default('') | string | length > 0 %}
MINIO_BASE_PATH = {{ gitea_attachment.minio.base_path }}
    {% endif %}
    {% if gitea_attachment.minio.use_ssl | default('') | string | length > 0 %}
MINIO_USE_SSL = {{ gitea_attachment.minio.use_ssl | bool | ternary('true', 'false') }}
    {% endif %}
    {% if gitea_attachment.minio.insecure_skip_verify | default('') | string | length > 0 %}
MINIO_INSECURE_SKIP_VERIFY = {{ gitea_attachment.minio.insecure_skip_verify | bool | ternary('true', 'false') }}
    {% endif %}
    {% if gitea_attachment.minio.checksum_algorithm | default('') | string | length > 0 and
          gitea_attachment.minio.checksum_algorithm in ["default", "md5"] %}
MINIO_CHECKSUM_ALGORITHM = {{ gitea_attachment.minio.checksum_algorithm }}
    {% endif %}
  {% endif %}
{% endif %}

{% if gitea_cache is defined and
      gitea_cache | count > 0 and
      gitea_cache.enabled | default('false') | bool %}
[cache]
ENABLED = {{ gitea_cache.enabled | default('false') | bool | ternary('true', 'false') }}
  {% if gitea_cache.adapter  | default('') | string | length > 0 and
        gitea_cache.adapter in ["memory", "redis", "memcache", "twoqueue"] %}
ADAPTER = {{ gitea_cache.adapter }}
  {% endif %}
  {% if gitea_cache.adapter == "memory" and
        gitea_cache.interval | default('') | string | length > 0 %}
INTERVAL = {{ gitea_cache.interval }}
  {% endif %}
  {% if gitea_cache.adapter in ["redis", "memcache", "twoqueue"] and
        gitea_cache.host | default('') | string | length > 0 %}
HOST = {{ gitea_cache.host }}
  {% endif %}
  {% if gitea_cache.item_ttl | default('') | string | length > 0 %}
ITEM_TTL = {{ gitea_cache.item_ttl }}
  {% endif %}
  {% if gitea_cache.last_commit | default('') | string | length > 0 and
        gitea_cache.last_commit.enabled | default('false') | bool %}

[cache.last_commit]
ENABLED = {{ gitea_cache.last_commit.enabled | default('false') | bool | ternary('true', 'false') }}
    {% if gitea_cache.last_commit.item_ttl | default('') | string | length > 0 %}
ITEM_TTL = {{ gitea_cache.last_commit.item_ttl }}
    {% endif %}
    {% if gitea_cache.last_commit.commits_count | default('') | string | length > 0 %}
COMMITS_COUNT = 1000
    {% endif %}
  {% endif %}
{% endif %}

{% if gitea_camo is defined and
      gitea_camo | count > 0 and
      gitea_camo.enabled | default('false') | bool %}
[camo]
  {#
    validate first:
    server_url **is required** if camo is enabled.
    hmac_key **is required** if camo is enabled.
  #}
  {% set gitea_camo_enabled = gitea_camo.enabled %}
  {% if gitea_camo.server_url | default('') | string | length == 0 %}
;; server_url **is required** if camo is enabled.
    {% set gitea_camo_enabled = false %}
  {% endif %}
  {% if gitea_camo.hmac_key | default('') | string | length == 0 %}
;; hmac_key **is required** if camo is enabled.
    {% set gitea_camo_enabled = false %}
  {% endif %}
ENABLED = {{ gitea_camo_enabled | bool | ternary('true', 'false') }}
  {% if gitea_camo.server_url | default('') | string | length > 0 %}
SERVER_URL = {{ gitea_camo.server_url }}
  {% endif %}
  {% if gitea_camo.hmac_key | default('') | string | length > 0 %}
HMAC_KEY = {{ gitea_camo.hmac_key }}
  {% endif %}
  {% if gitea_camo.allways | default('') | string | length > 0 %}
ALLWAYS = {{ gitea_camo.allways | default('false') | bool | ternary('true', 'false') }}
  {% endif %}
{% endif %}

{% if gitea_cron is defined and
      gitea_cron | count > 0 and
      gitea_cron.enabled | default('false') | bool %}
[cron]
ENABLED = {{ gitea_cron.enabled | default('false') | bool | ternary('true', 'false') }}
  {% if gitea_cron.run_at_start | default('') | string | length > 0 %}
RUN_AT_START = {{ gitea_cron.run_at_start | bool | ternary('true', 'false') }}
  {% endif %}
  {% set cron_jobs = [
      "archive_cleanup", "update_mirrors", "repo_health_check", "check_repo_stats",
      "update_migration_poster_id", "sync_external_users", "cleanup_hook_task_table",
      "cleanup_packages", "delete_inactive_accounts", "delete_repo_archives",
      "git_gc_repos", "resync_all_sshkeys", "resync_all_hooks", "reinit_missing_repos",
      "delete_missing_repos", "delete_generated_repository_avatars", "delete_old_actions",
      "update_checker", "delete_old_system_notices", "gc_lfs"
      ] %}
  {% set cron_parameters = [
      "run_at_start", "notice_on_success", "schedule", "older_than",
      "pull_limit", "push_limit", "update_existing", "cleanup_type", "number_to_keep",
      "http_endpoint"
      ] %}
  {% for job in cron_jobs %}
    {% set d = gitea_cron.get(job) %}
    {% if d and d.enabled | default('false') | bool %}

      {% set _ = d.pop("enabled") %}
      {% if d.comment | default('') | string | length > 0 %}
;; {{ d.comment }}
        {% set _ = d.pop("comment") %}
      {% endif %}
[cron.{{ job }}]
      {% for k, v in d.items() %}
        {% if v | default('') | string | length > 0 %}
{{ k | upper }} = {{ v | bodsch.core.config_bool(true_as='true', false_as='false') }}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endif %}

{% if gitea_database is defined and
      gitea_database | count > 0 %}
  {% if gitea_database.db_type | default('') | string | length > 0 and
        gitea_database.db_type in ["mysql", "postgres", "mssql", "sqlite3"] %}
[database]
DB_TYPE = {{ gitea_database.db_type }}
    {% if gitea_database.host | default('') | string | length > 0 %}
HOST = {{ gitea_database.host }}
    {% endif %}
    {% if gitea_database.name | default('') | string | length > 0 %}
NAME = {{ gitea_database.name }}
    {% endif %}
    {% if gitea_database.user | default('') | string | length > 0 %}
USER = {{ gitea_database.user }}
    {% endif %}
    {% if gitea_database.db_type in ["mysql", "postgres", "mssql"] %}
      {% if gitea_database.passwd | default('') | string | length > 0 %}
PASSWD = {{ gitea_database.passwd }}
      {% endif %}
    {% endif %}
    {# DB specials ... #}
    {# mysql | mariadb #}
    {% if gitea_database.db_type == "mysql" %}
      {% if gitea_database.ssl_mode | default('') | string | length > 0 and
            gitea_database.ssl_mode in ["false", "true", "skip-verify"] %}
        {% if gitea_database.ssl_mode != "skip-verify" %}
SSL_MODE = {{ gitea_database.ssl_mode | bodsch.core.config_bool(true_as='true', false_as='false') }}
        {% else %}
SSL_MODE = {{ gitea_database.ssl_mode }}
        {% endif %}
      {% endif %}
      {% if gitea_database.charset | default('') | string | length > 0 %}
CHARSET = {{ gitea_database.charset }}
      {% endif %}
    {% endif %}
    {# postgres #}
    {% if gitea_database.db_type == "postgres" %}
      {% if gitea_database.ssl_mode | default('') | string | length > 0 and
            gitea_database.ssl_mode in ["disable", "require", "verify-full"] %}
SSL_MODE = {{ gitea_database.ssl_mode }}
      {% endif %}
      {% if gitea_database.schema | default('') | string | length > 0 %}
SCHEMA = {{ gitea_database.schema }}
      {% endif %}
    {% endif %}
    {# sqlite #}
    {% if gitea_database.db_type == "sqlite3" %}
      {% if gitea_database.path | default('') | string | length > 0 %}
PATH = {{ gitea_database.path }}
      {% endif %}
      {% if gitea_database.sqlite_timeout | default('') | string | length > 0 %}
SQLITE_TIMEOUT = {{ gitea_database.sqlite_timeout }}
      {% if gitea_database.sqlite_journal_mode | default('') | string | length > 0 %}
      {% endif %}
SQLITE_JOURNAL_MODE = {{ gitea_database.sqlite_journal_mode }}
      {% endif %}
    {% endif %}
    {# mssql #}
    {% if gitea_database.db_type == "mssql" %}
      {# #}
    {% endif %}
    {% if gitea_database.iterate_buffer_size | default('') | string | length > 0 %}
ITERATE_BUFFER_SIZE = {{ gitea_database.iterate_buffer_size }}
    {% endif %}
    {% if gitea_database.log_sql | default('') | string | length > 0 %}
LOG_SQL = {{ gitea_database.log_sql | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if gitea_database.db_retries | default('') | string | length > 0 %}
DB_RETRIES = {{ gitea_database.db_retries }}
    {% endif %}
    {% if gitea_database.db_retry_backoff | default('') | string | length > 0 %}
DB_RETRY_BACKOFF = {{ gitea_database.db_retry_backoff }}
    {% endif %}
    {% if gitea_database.max_idle_conns | default('') | string | length > 0 %}
MAX_IDLE_CONNS = {{ gitea_database.max_idle_conns }}
    {% endif %}
    {% if gitea_database.conn_max_lifetime | default('') | string | length > 0 %}
CONN_MAX_LIFETIME = {{ gitea_database.conn_max_lifetime }}
    {% endif %}
    {% if gitea_database.max_open_conns | default('') | string | length > 0 %}
MAX_OPEN_CONNS = {{ gitea_database.max_open_conns }}
    {% endif %}
    {% if gitea_database.auto_migration | default('') | string | length > 0 %}
AUTO_MIGRATION = {{ gitea_database.auto_migration | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
  {% else %}
;; unkown database type
  {% endif %}
{% endif %}

{% if gitea_federation is defined and
      gitea_federation | count > 0 and
      gitea_federation.enabled | default('false') | bool %}
[federation]
ENABLED = {{ gitea_federation.enabled | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_federation.share_user_statistics | default('') | string | length > 0 %}
SHARE_USER_STATISTICS = {{ gitea_federation.share_user_statistics | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_federation.max_size | default('') | string | length > 0 %}
MAX_SIZE = {{ gitea_federation.max_size }}
  {% endif %}
  {% if gitea_federation.algorithms | default('') | string | length > 0 %}
ALGORITHMS = {{ gitea_federation.algorithms | join(', ') }}
  {% endif %}
  {% if gitea_federation.digest_algorithm | default('') | string | length > 0 %}
DIGEST_ALGORITHM = {{ gitea_federation.digest_algorithm }}
  {% endif %}
  {% if gitea_federation.get_headers | default('') | string | length > 0 %}
GET_HEADERS = {{ gitea_federation.get_headers | join(', ') }}
  {% endif %}
  {% if gitea_federation.post_headers | default('') | string | length > 0 %}
POST_HEADERS = {{ gitea_federation.post_headers | join(', ') }}
  {% endif %}
{% endif %}

{% if gitea_git is defined and
      gitea_git | count > 0 %}
[git]
  {% if gitea_git.path | default('') | string | length > 0 %}
PATH = {{ gitea_git.path }}
  {% endif %}
  {% if gitea_git.home_path | default('') | string | length > 0 %}
HOME_PATH = {{ gitea_git.home_path }}
  {% endif %}
  {% if gitea_git.disable_diff_highlight | default('') | string | length > 0 %}
DISABLE_DIFF_HIGHLIGHT = {{ gitea_git.disable_diff_highlight | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_git.max_git_diff_lines | default('') | string | length > 0 %}
MAX_GIT_DIFF_LINES = {{ gitea_git.max_git_diff_lines }}
  {% endif %}
  {% if gitea_git.max_git_diff_line_characters | default('') | string | length > 0 %}
MAX_GIT_DIFF_LINE_CHARACTERS = {{ gitea_git.max_git_diff_line_characters }}
  {% endif %}
  {% if gitea_git.max_git_diff_files | default('') | string | length > 0 %}
MAX_GIT_DIFF_FILES = {{ gitea_git.max_git_diff_files }}
  {% endif %}
  {% if gitea_git.commits_range_size | default('') | string | length > 0 %}
COMMITS_RANGE_SIZE = {{ gitea_git.commits_range_size }}
  {% endif %}
  {% if gitea_git.branches_range_size | default('') | string | length > 0 %}
BRANCHES_RANGE_SIZE = {{ gitea_git.branches_range_size }}
  {% endif %}
  {% if gitea_git.gc_args | default('') | string | length > 0 %}
GC_ARGS = {{ gitea_git.gc_args }}
  {% endif %}
  {% if gitea_git.enable_auto_git_wire_protocol | default('') | string | length > 0 %}
ENABLE_AUTO_GIT_WIRE_PROTOCOL = {{ gitea_git.enable_auto_git_wire_protocol | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_git.pull_request_push_message | default('') | string | length > 0 %}
PULL_REQUEST_PUSH_MESSAGE = {{ gitea_git.pull_request_push_message | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_git.large_object_threshold | default('') | string | length > 0 %}
LARGE_OBJECT_THRESHOLD = {{ gitea_git.large_object_threshold }}
  {% endif %}
  {% if gitea_git.disable_core_protect_ntfs | default('') | string | length > 0 %}
DISABLE_CORE_PROTECT_NTFS = {{ gitea_git.disable_core_protect_ntfs | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_git.disable_partial_clone | default('') | string | length > 0 %}
DISABLE_PARTIAL_CLONE = {{  gitea_git.disable_partial_clone | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_git.timeout is defined and
        gitea_git.timeout | count > 0 %}
[git.timeout]
    {% if gitea_git.timeout.default | default('') | string | length > 0 %}
DEFAULT = {{ gitea_git.timeout.default }}
    {% endif %}
    {% if gitea_git.timeout.migrate | default('') | string | length > 0 %}
MIGRATE = {{ gitea_git.timeout.migrate }}
    {% endif %}
    {% if gitea_git.timeout.mirror | default('') | string | length > 0 %}
MIRROR = {{ gitea_git.timeout.mirror }}
    {% endif %}
    {% if gitea_git.timeout.clone | default('') | string | length > 0 %}
CLONE = {{ gitea_git.timeout.clone }}
    {% endif %}
    {% if gitea_git.timeout.pull | default('') | string | length > 0 %}
PULL = {{ gitea_git.timeout.pull }}
    {% endif %}
    {% if gitea_git.timeout.gc | default('') | string | length > 0 %}
GC = {{ gitea_git.timeout.gc }}
    {% endif %}
  {% endif %}
  {% if gitea_git.reflog is defined and
        gitea_git.reflog | count > 0 and
        gitea_git.reflog.enabled | default('false') | bool %}
[git.reflog]
ENABLED = {{ gitea_git.reflog.enabled | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% if gitea_git.reflog.expiration | default('') | string | length > 0 %}
EXPIRATION = {{ gitea_git.reflog.expiration }}
    {% endif %}
  {% endif %}
{% endif %}

{% if gitea_highlight is defined and
      gitea_highlight | count > 0 %}

{% endif %}

{% if gitea_i18n is defined and
      gitea_i18n | count > 0 %}
[i18n]
  {% if gitea_i18n.langs is defined and
        gitea_i18n.langs | count > 0 %}
LANGS = {{ gitea_i18n.langs | join(',') }}
  {% endif %}
  {% if gitea_i18n.names is defined and
        gitea_i18n.names | count > 0 %}
NAMES = {{ gitea_i18n.names | join(',') }}
  {% endif %}
{% endif %}

{% if gitea_indexer is defined and
      gitea_indexer | count > 0 %}
  {% if gitea_indexer.issue_indexer_type | default('') | string | length > 0 and
        gitea_indexer.issue_indexer_type in ["bleve", "db", "elasticsearch", "meilisearch"] %}
[indexer]
ISSUE_INDEXER_TYPE = {{ gitea_indexer.issue_indexer_type }}
    {% if gitea_indexer.issue_indexer_type == "bleve" and
          gitea_indexer.issue_indexer_path | default('') | string | length > 0 %}
ISSUE_INDEXER_PATH = {{ gitea_indexer.issue_indexer_path }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type in ["elasticsearch", "meilisearch"] and
          gitea_indexer.issue_indexer_conn_str | default('') | string | length > 0 %}
ISSUE_INDEXER_CONN_STR = {{ gitea_indexer.issue_indexer_conn_str }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type == "elasticsearch" and
          gitea_indexer.issue_indexer_name | default('') | string | length > 0 %}
ISSUE_INDEXER_NAME = {{ gitea_indexer.issue_indexer_name }}
    {% endif %}
    {% if gitea_indexer.startup_timeout | default('') | string | length > 0 %}
STARTUP_TIMEOUT = {{ gitea_indexer.startup_timeout }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_queue_type | default('') | string | length > 0 and
          gitea_indexer.issue_indexer_queue_type in ["channel", "levelqueue", "redis"] %}
;; **DEPRECATED** use settings in `[queue.issue_indexer]`.
ISSUE_INDEXER_QUEUE_TYPE = {{ gitea_indexer.issue_indexer_queue_type }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type == "levelqueue" and
          gitea_indexer.issue_indexer_queue_dir | default('') | string | length > 0 %}
;; **DEPRECATED** use settings in `[queue.issue_indexer]`.
ISSUE_INDEXER_QUEUE_DIR = {{ gitea_indexer.issue_indexer_queue_dir }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type in ["levelqueue", "redis"] and
          gitea_indexer.issue_indexer_queue_conn_str | default('') | string | length > 0 %}
;; **DEPRECATED** use settings in `[queue.issue_indexer]`.
ISSUE_INDEXER_QUEUE_CONN_STR = {{ gitea_indexer.issue_indexer_queue_conn_str }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_queue_batch_number | default('') | string | length > 0 %}
;; **DEPRECATED** use settings in `[queue.issue_indexer]`.
ISSUE_INDEXER_QUEUE_BATCH_NUMBER = {{ gitea_indexer.issue_indexer_queue_batch_number }}
    {% endif %}
    {% if gitea_indexer.repo_indexer_enabled | default('') | string | length > 0 %}
REPO_INDEXER_ENABLED = {{ gitea_indexer.repo_indexer_enabled | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type in ["bleve", "elasticsearch"] and
          gitea_indexer.issue_indexer_type | default('') | string | length > 0 %}
REPO_INDEXER_TYPE = {{ gitea_indexer.issue_indexer_type }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type == "bleve" and
          gitea_indexer.repo_indexer_path | default('') | string | length > 0 %}
REPO_INDEXER_PATH = {{ gitea_indexer.repo_indexer_path }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type == "elasticsearch" and
          gitea_indexer.repo_indexer_conn_str | default('') | string | length > 0 %}
REPO_INDEXER_CONN_STR = {{ gitea_indexer.repo_indexer_conn_str }}
    {% endif %}
    {% if gitea_indexer.issue_indexer_type == "elasticsearch" and
          gitea_indexer.repo_indexer_name | default('') | string | length > 0 %}
REPO_INDEXER_NAME = {{ gitea_indexer.repo_indexer_name }}
    {% endif %}
    {% if gitea_indexer.repo_indexer_include | count > 0 %}
REPO_INDEXER_INCLUDE = {{ gitea_indexer.repo_indexer_include | join(', ') }}
    {% endif %}
    {% if gitea_indexer.repo_indexer_exclude | count > 0 %}
REPO_INDEXER_EXCLUDE = {{ gitea_indexer.repo_indexer_exclude | join(', ') }}
    {% endif %}
    {% if gitea_indexer.update_buffer_len | default('') | string | length > 0 %}
;; **DEPRECATED** use settings in `[queue.issue_indexer]`.
UPDATE_BUFFER_LEN = {{ gitea_indexer.update_buffer_len }}
    {% endif %}
    {% if gitea_indexer.max_file_size | default('') | string | length > 0 %}
MAX_FILE_SIZE = {{ gitea_indexer.max_file_size }}
    {% endif %}
  {% endif %}
{% endif %}

{% if gitea_log is defined and
      gitea_log | count > 0 %}
[log]
  {% if gitea_log.root_path | default('') | string | length > 0 %}
ROOT_PATH = {{ gitea_log.root_path }}
  {% endif %}
  {% if gitea_log.mode | count > 0 %}
     {% set valid_log_mode = ["console", "file", "conn", "smtp", "database"] %}
     {% set log_mode = gitea_log.mode | bodsch.core.compare_list(compare_to_list=valid_log_mode) %}
MODE = {{ log_mode | join(', ') }}
  {% endif %}
  {% if gitea_log.level | default('') | string | length > 0 and
        gitea_log.level | lower in ["trace", "debug", "info", "warn", "error", "critical", "none"] %}
LEVEL = {{ gitea_log.level }}
  {% endif %}
  {% if gitea_log.disable_router_log | default('') | string | length > 0 %}
DISABLE_ROUTER_LOG = {{ gitea_log.disable_router_log | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_log.router | default('') | string | length > 0 %}
ROUTER = {{ gitea_log.router }}
  {% endif %}
  {% if gitea_log.enable_access_log | default('') | string | length > 0 %}
ENABLE_ACCESS_LOG = {{ gitea_log.enable_access_log | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_log.access | default('') | string | length > 0 %}
ACCESS = {{ gitea_log.access }}
  {% endif %}
  {% if gitea_log.access_log_template | default('') | string | length > 0 %}
  {#
    {{.Ctx.RemoteAddr}} - {{.Identity}} {{.Start.Format "[02/Jan/2006:15:04:05 -0700]" }} "{{.Ctx.Req.Method}} {{.Ctx.Req.URL.RequestURI}} {{.Ctx.Req.Proto}}" {{.ResponseWriter.Status}} {{.ResponseWriter.Size}} "{{.Ctx.Req.Referer}}\" \"{{.Ctx.Req.UserAgent}}"
  #}
ACCESS_LOG_TEMPLATE = {{ gitea_log.access_log_template }}
  {% endif %}
  {% if gitea_log.enable_ssh_log | default('') | string | length > 0 %}
ENABLE_SSH_LOG = {{ gitea_log.enable_ssh_log | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_log.stacktrace_level | default('') | string | length > 0 and
        gitea_log.stacktrace_level | lower in ["trace", "debug", "info", "warn", "error", "critical", "none"] %}
STACKTRACE_LEVEL = {{ gitea_log.stacktrace_level }}
  {% endif %}
  {% if gitea_log.buffer_len | default('') | string | length > 0 %}
BUFFER_LEN = {{ gitea_log.buffer_len }}
  {% endif %}
{% endif %}

{% if gitea_mailer is defined and
      gitea_mailer | count > 0 and
      gitea_mailer.enabled | bool %}
[mailer]
ENABLED = {{ gitea_mailer.enabled | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_mailer.send_buffer_len | default('') | string | length > 0 %}
SEND_BUFFER_LEN = {{ gitea_mailer.send_buffer_len }}
  {% endif %}
;;
;; Prefix displayed before subject in mail
;SUBJECT_PREFIX =
;;
;; Mail server protocol. One of "smtp", "smtps", "smtp+starttls", "smtp+unix", "sendmail", "dummy".
;; - sendmail: use the operating system's `sendmail` command instead of SMTP. This is common on Linux systems.
;; - dummy: send email messages to the log as a testing phase.
;; If your provider does not explicitly say which protocol it uses but does provide a port,
;; you can set SMTP_PORT instead and this will be inferred.
;; (Before 1.18, see the notice, this was controlled via MAILER_TYPE and IS_TLS_ENABLED.)
;PROTOCOL =
;;
;; Mail server address, e.g. smtp.gmail.com.
;; For smtp+unix, this should be a path to a unix socket instead.
;; (Before 1.18, see the notice, this was combined with SMTP_PORT as HOST.)
;SMTP_ADDR =
;;
;; Mail server port. Common ports are:
;;   25:  insecure SMTP
;;   465: SMTP Secure
;;   587: StartTLS
;; If no protocol is specified, it will be inferred by this setting.
;; (Before 1.18, this was combined with SMTP_ADDR as HOST.)
;SMTP_PORT =
;;
;; Enable HELO operation. Defaults to true.
;ENABLE_HELO = true
;;
;; Custom hostname for HELO operation.
;; If no value is provided, one is retrieved from system.
;HELO_HOSTNAME =
;;
;; If set to `true`, completely ignores server certificate validation errors.
;; This option is unsafe. Consider adding the certificate to the system trust store instead.
;FORCE_TRUST_SERVER_CERT = false
;;
;; Use client certificate in connection.
;USE_CLIENT_CERT = false
;CLIENT_CERT_FILE = custom/mailer/cert.pem
;CLIENT_KEY_FILE = custom/mailer/key.pem
;;
;; Mail from address, RFC 5322. This can be just an email address, or the `"Name" <email@example.com>` format
;FROM =
;;
;; Sometimes it is helpful to use a different address on the envelope. Set this to use ENVELOPE_FROM as the from on the envelope. Set to `<>` to send an empty address.
;ENVELOPE_FROM =
;;
;; Mailer user name and password, if required by provider.
;USER =
;;
;; Use PASSWD = `your password` for quoting if you use special characters in the password.
;PASSWD =
;;
;; Send mails only in plain text, without HTML alternative
;SEND_AS_PLAIN_TEXT = false
;;
;; Specify an alternative sendmail binary
;SENDMAIL_PATH = sendmail
;;
;; Specify any extra sendmail arguments
;; WARNING: if your sendmail program interprets options you should set this to "--" or terminate these args with "--"
;SENDMAIL_ARGS =
;;
;; Timeout for Sendmail
;SENDMAIL_TIMEOUT = 5m
;;
;; convert \r\n to \n for Sendmail
;SENDMAIL_CONVERT_CRLF = true
{% endif %}

{% if gitea_markdown is defined and
      gitea_markdown | count > 0 %}
[markdown]
  {% if gitea_markdown.enable_hard_line_break_in_comments | default('') | string | length > 0 %}
ENABLE_HARD_LINE_BREAK_IN_COMMENTS = {{ gitea_markdown.enable_hard_line_break_in_comments | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_markdown.enable_hard_line_break_in_documents | default('') | string | length > 0 %}
ENABLE_HARD_LINE_BREAK_IN_DOCUMENTS = {{ gitea_markdown.enable_hard_line_break_in_documents | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_markdown.custom_url_schemes | count > 0 %}
CUSTOM_URL_SCHEMES = {{ gitea_markdown.custom_url_schemes | join(', ') }}
  {% endif %}
  {% if gitea_markdown.file_extensions | count > 0 %}
FILE_EXTENSIONS = {{ gitea_markdown.file_extensions | join(', ') }}
  {% endif %}
  {% if gitea_markdown.enable_math | default('') | string | length > 0 %}
ENABLE_MATH = {{ gitea_markdown.enable_math | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
{% endif %}

{% if gitea_markup is defined and
      gitea_markup | count > 0 %}
[markup]
  {% if gitea_markup.mermaid_max_source_characters | default('') | string | length > 0 %}
MERMAID_MAX_SOURCE_CHARACTERS = {{ gitea_markup.mermaid_max_source_characters }}
  {% endif %}
  {% if gitea_markup.sanitizer | count > 0 %}
    {% for i in gitea_markup.sanitizer %}

[markup.sanitizer.{{ i.id }}]
      {% if i.element | default('') | string | length > 0 %}
ELEMENT = {{ i.element }}
      {% endif %}
      {% if i.allow_attr | default('') | string | length > 0 %}
ALLOW_ATTR = {{ i.allow_attr }}
      {% endif %}
      {% if i.regexp | default('') | string | length > 0 %}
REGEXP = {{ i.regexp }}
      {% endif %}
    {% endfor %}
  {% endif %}
  {% if gitea_markup.asciidoc is defined and
        gitea_markup.asciidoc | count > 0 and
        gitea_markup.asciidoc.enabled | bool %}

[markup.asciidoc]
ENABLED = {{ gitea_markup.asciidoc.enabled | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% if gitea_markup.asciidoc.file_extensions | count > 0 %}
FILE_EXTENSIONS = {{ gitea_markup.asciidoc.file_extensions | join(', ') }}
    {% endif %}
    {% if gitea_markup.asciidoc.render_command | default('') | string | length > 0 %}
RENDER_COMMAND = "{{ gitea_markup.asciidoc.render_command }}"
    {% endif %}
    {% if gitea_markup.asciidoc.is_input_file | default('') | string | length > 0 %}
IS_INPUT_FILE = {{ gitea_markup.asciidoc.is_input_file | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if gitea_markup.asciidoc.render_content_mode | default('') | string | length > 0 and
          gitea_markup.asciidoc.render_content_mode in ["sanitized", "no-sanitizer", "iframe"] %}
RENDER_CONTENT_MODE = {{ gitea_markup.asciidoc.render_content_mode }}
    {% endif %}
  {% endif %}
{% endif %}

{% if gitea_metrics is defined and
      gitea_metrics | count > 0 and
      gitea_metrics.enabled | bool %}
[metrics]
ENABLED = {{ gitea_metrics.enabled | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_metrics.token | default('') | string | length > 0 %}
;; If you want to add authorization, specify a token here
TOKEN = {{ gitea_metrics.token }}
  {% endif %}
  {% if gitea_metrics.enabled_issue_by_label | default('') | string | length > 0 %}
ENABLED_ISSUE_BY_LABEL = {{ gitea_metrics.enabled_issue_by_label | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_metrics.enabled_issue_by_repository | default('') | string | length > 0 %}
ENABLED_ISSUE_BY_REPOSITORY = {{ gitea_metrics.enabled_issue_by_repository | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
{% endif %}

{% if gitea_migrations is defined and
      gitea_migrations | count > 0 %}
[migrations]
  {% if gitea_migrations.max_attempts | default('') | string | length > 0 %}
MAX_ATTEMPTS = {{ gitea_migrations.max_attempts }}
  {% endif %}
  {% if gitea_migrations.retry_backoff | default('') | string | length > 0 %}
RETRY_BACKOFF = {{ gitea_migrations.retry_backoff }}
  {% endif %}
  {% if gitea_migrations.allowed_domains | count > 0 %}
ALLOWED_DOMAINS = {{ gitea_migrations.allowed_domains | join(', ') }}
  {% endif %}
  {% if gitea_migrations.blocked_domains | count > 0 %}
BLOCKED_DOMAINS = {{ gitea_migrations.blocked_domains | join(', ') }}
  {% endif %}
  {% if gitea_migrations.allow_localnetworks | default('') | string | length > 0 %}
ALLOW_LOCALNETWORKS = {{ gitea_migrations.allow_localnetworks | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
{% endif %}

{% if gitea_mirror is defined and
      gitea_mirror | count > 0 and
      gitea_mirror.enabled | bool %}
[mirror]
ENABLED = {{ gitea_mirror.enabled | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_mirror.disable_new_pull | default('') | string | length > 0 %}
DISABLE_NEW_PULL = {{ gitea_mirror.disable_new_pull | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_mirror.disable_new_push | default('') | string | length > 0 %}
DISABLE_NEW_PUSH = {{ gitea_mirror.disable_new_push | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_mirror.default_interval | default('') | string | length > 0 %}
DEFAULT_INTERVAL = {{ gitea_mirror.default_interval }}
  {% endif %}
  {% if gitea_mirror.min_interval | default('') | string | length > 0 %}
MIN_INTERVAL = {{ gitea_mirror.min_interval }}
  {% endif %}
{% endif %}

{% if gitea_oauth2 is defined and
      gitea_oauth2 | count > 0 and
      gitea_oauth2.enabled | bool %}
[oauth2]
ENABLE = {{ gitea_oauth2.enabled | default('false') | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_oauth2.jwt_signing_algorithm | default('') | string | length > 0 and
        gitea_oauth2.jwt_signing_algorithm in ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "EdDSA"] %}
JWT_SIGNING_ALGORITHM = {{ gitea_oauth2.jwt_signing_algorithm }}
  {% endif %}
  {% if gitea_oauth2.jwt_signing_algorithm in ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512"] and
        gitea_oauth2.jwt_signing_private_key_file | default('') | string | length > 0 %}
JWT_SIGNING_PRIVATE_KEY_FILE = {{ gitea_oauth2.jwt_signing_private_key_file }}
  {% endif %}
  {% if gitea_oauth2.jwt_signing_algorithm in ["HS256", "HS384", "HS512"] and
        gitea_oauth2.jwt_secret | default('') | string | length > 0 %}
JWT_SECRET = {{ gitea_oauth2.jwt_secret }}
  {% endif %}
  {% if gitea_oauth2.access_token_expiration_time | default('') | string | length > 0 %}
ACCESS_TOKEN_EXPIRATION_TIME = {{ gitea_oauth2.access_token_expiration_time }}
  {% endif %}
  {% if gitea_oauth2.refresh_token_expiration_time | default('') | string | length > 0 %}
REFRESH_TOKEN_EXPIRATION_TIME = {{ gitea_oauth2.refresh_token_expiration_time }}
  {% endif %}
  {% if gitea_oauth2.invalidate_refresh_tokens | default('') | string | length > 0 %}
INVALIDATE_REFRESH_TOKENS = {{ gitea_oauth2.invalidate_refresh_tokens | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_oauth2.max_token_length | default('') | string | length > 0 %}
MAX_TOKEN_LENGTH = {{ gitea_oauth2.max_token_length }}
  {% endif %}
{% endif %}

{% if gitea_oauth2_client is defined and
      gitea_oauth2_client | count > 0 %}
[oauth2_client]
  {% if gitea_oauth2_client.register_email_confirm | default('') | string | length > 0 %}
REGISTER_EMAIL_CONFIRM = {{ gitea_oauth2_client.register_email_confirm }}
  {% endif %}
  {% if gitea_oauth2_client.openid_connect_scopes | default('') | string | length > 0 %}
OPENID_CONNECT_SCOPES = {{ gitea_oauth2_client.openid_connect_scopes }}
  {% endif %}
  {% if gitea_oauth2_client.enable_auto_registration | default('') | string | length > 0 %}
ENABLE_AUTO_REGISTRATION = {{ gitea_oauth2_client.enable_auto_registration | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_oauth2_client.username | default('') | string | length > 0 and
        gitea_oauth2_client.username in ["userid", "nickname", "email"] %}
USERNAME = {{ gitea_oauth2_client.username }}
  {% endif %}
  {% if gitea_oauth2_client.update_avatar | default('') | string | length > 0 %}
UPDATE_AVATAR = {{ gitea_oauth2_client.update_avatar | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_oauth2_client.account_linking | default('') | string | length > 0 and
        gitea_oauth2_client.account_linking in ["disabled", "login", "auto"] %}
ACCOUNT_LINKING = {{ gitea_oauth2_client.account_linking }}
  {% endif %}
{% endif %}

{% if gitea_openid is defined and
      gitea_openid | count > 0 %}
[openid]
  {% if gitea_openid.enable_openid_signin | default('') | string | length > 0 %}
ENABLE_OPENID_SIGNIN = {{ gitea_openid.enable_openid_signin | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_openid.enable_openid_signup | default('') | string | length > 0 %}
ENABLE_OPENID_SIGNUP = {{ gitea_openid.enable_openid_signup | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_openid.whitelisted_uris | count > 0 %}
WHITELISTED_URIS = {{ gitea_openid.whitelisted_uris | join(' ') }}
  {% endif %}
  {% if gitea_openid.blacklisted_uris | count > 0 %}
BLACKLISTED_URIS = {{ gitea_openid.blacklisted_uris | join(' ') }}
  {% endif %}
{% endif %}

{% if gitea_other is defined and
      gitea_other | count > 0 %}
[other]
  {% if gitea_other.show_footer_branding | default('') | string | length > 0 %}
SHOW_FOOTER_BRANDING = {{ gitea_other.show_footer_branding | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_other.show_footer_version | default('') | string | length > 0 %}
SHOW_FOOTER_VERSION = {{ gitea_other.show_footer_version | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_other.show_footer_template_load_time | default('') | string | length > 0 %}
SHOW_FOOTER_TEMPLATE_LOAD_TIME = {{ gitea_other.show_footer_template_load_time | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_other.enable_sitemap | default('') | string | length > 0 %}
ENABLE_SITEMAP = {{ gitea_other.enable_sitemap | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_other.enable_feed | default('') | string | length > 0 %}
ENABLE_FEED = {{ gitea_other.enable_feed | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
{% endif %}

{% if gitea_packages is defined and
      gitea_packages | count > 0 and
      gitea_packages.enabled | bool %}
[packages]
ENABLED = {{ gitea_packages.enabled | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_packages.chunked_upload_path | default('') | string | length > 0 %}
CHUNKED_UPLOAD_PATH = {{ gitea_packages.chunked_upload_path }}
  {% endif %}
  {% if gitea_packages.limit_total_owner_count | default('') | string | length > 0 %}
LIMIT_TOTAL_OWNER_COUNT = {{ gitea_packages.limit_total_owner_count }}
  {% endif %}
  {% if gitea_packages.limit_total_owner_size | default('') | string | length > 0 %}
LIMIT_TOTAL_OWNER_SIZE = {{ gitea_packages.limit_total_owner_size }}
  {% endif %}
  {% if gitea_packages.limit_size_cargo | default('') | string | length > 0 %}
LIMIT_SIZE_CARGO = {{ gitea_packages.limit_size_cargo }}
  {% endif %}
  {% if gitea_packages.limit_size_chef | default('') | string | length > 0 %}
LIMIT_SIZE_CHEF = {{ gitea_packages.limit_size_chef }}
  {% endif %}
  {% if gitea_packages.limit_size_composer | default('') | string | length > 0 %}
LIMIT_SIZE_COMPOSER = {{ gitea_packages.limit_size_composer }}
  {% endif %}
  {% if gitea_packages.limit_size_conan | default('') | string | length > 0 %}
LIMIT_SIZE_CONAN = {{ gitea_packages.limit_size_conan }}
  {% endif %}
  {% if gitea_packages.limit_size_conda | default('') | string | length > 0 %}
LIMIT_SIZE_CONDA = {{ gitea_packages.limit_size_conda }}
  {% endif %}
  {% if gitea_packages.limit_size_container | default('') | string | length > 0 %}
LIMIT_SIZE_CONTAINER = {{ gitea_packages.limit_size_container }}
  {% endif %}
  {% if gitea_packages.limit_size_generic | default('') | string | length > 0 %}
LIMIT_SIZE_GENERIC = {{ gitea_packages.limit_size_generic }}
  {% endif %}
  {% if gitea_packages.limit_size_helm | default('') | string | length > 0 %}
LIMIT_SIZE_HELM = {{ gitea_packages.limit_size_helm }}
  {% endif %}
  {% if gitea_packages.limit_size_maven | default('') | string | length > 0 %}
LIMIT_SIZE_MAVEN = {{ gitea_packages.limit_size_maven }}
  {% endif %}
  {% if gitea_packages.limit_size_npm | default('') | string | length > 0 %}
LIMIT_SIZE_NPM = {{ gitea_packages.limit_size_npm }}
  {% endif %}
  {% if gitea_packages.limit_size_nuget | default('') | string | length > 0 %}
LIMIT_SIZE_NUGET = {{ gitea_packages.limit_size_nuget }}
  {% endif %}
  {% if gitea_packages.limit_size_pub | default('') | string | length > 0 %}
LIMIT_SIZE_PUB = {{ gitea_packages.limit_size_pub }}
  {% endif %}
  {% if gitea_packages.limit_size_pypi | default('') | string | length > 0 %}
LIMIT_SIZE_PYPI = {{ gitea_packages.limit_size_pypi }}
  {% endif %}
  {% if gitea_packages.limit_size_rubygems | default('') | string | length > 0 %}
LIMIT_SIZE_RUBYGEMS = {{ gitea_packages.limit_size_rubygems }}
  {% endif %}
  {% if gitea_packages.limit_size_swift | default('') | string | length > 0 %}
LIMIT_SIZE_SWIFT = {{ gitea_packages.limit_size_swift }}
  {% endif %}
  {% if gitea_packages.limit_size_vagrant | default('') | string | length > 0 %}
LIMIT_SIZE_VAGRANT = {{ gitea_packages.limit_size_vagrant }}
  {% endif %}
{% endif %}

{% if gitea_picture is defined and
      gitea_picture | count > 0 %}
[picture]
  {% if gitea_picture.avatar_upload_path | default('') | string | length > 0 %}
AVATAR_UPLOAD_PATH = {{ gitea_picture.avatar_upload_path }}
  {% endif %}
  {% if gitea_picture.repository_avatar_upload_path | default('') | string | length > 0 %}
REPOSITORY_AVATAR_UPLOAD_PATH = {{ gitea_picture.repository_avatar_upload_path }}
  {% endif %}
  {% if gitea_picture.repository_avatar_fallback | default('') | string | length > 0 and
        gitea_picture.repository_avatar_fallback in ["none", "random", "image"]    %}
REPOSITORY_AVATAR_FALLBACK = {{ gitea_picture.repository_avatar_fallback }}
  {% endif %}
  {% if gitea_picture.repository_avatar_fallback_image | default('') | string | length > 0 %}
REPOSITORY_AVATAR_FALLBACK_IMAGE = {{ gitea_picture.repository_avatar_fallback_image }}
  {% endif %}
  {% if gitea_picture.avatar_max_width | default('') | string | length > 0 %}
AVATAR_MAX_WIDTH = {{ gitea_picture.avatar_max_width }}
  {% endif %}
  {% if gitea_picture.avatar_max_height | default('') | string | length > 0 %}
AVATAR_MAX_HEIGHT = {{ gitea_picture.avatar_max_height }}
  {% endif %}
  {% if gitea_picture.avatar_rendered_size_factor | default('') | string | length > 0 %}
AVATAR_RENDERED_SIZE_FACTOR = {{ gitea_picture.avatar_rendered_size_factor }}
  {% endif %}
  {% if gitea_picture.avatar_max_file_size | default('') | string | length > 0 %}
AVATAR_MAX_FILE_SIZE = {{ gitea_picture.avatar_max_file_size }}
  {% endif %}
  {% if gitea_picture.gravatar_source | default('') | string | length > 0 %}
GRAVATAR_SOURCE = {{ gitea_picture.gravatar_source }}
  {% endif %}
  {% if gitea_picture.disable_gravatar | default('') | string | length > 0 %}
DISABLE_GRAVATAR = {{ gitea_picture.disable_gravatar | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_picture.enable_federated_avatar | default('') | string | length > 0 %}
ENABLE_FEDERATED_AVATAR = {{ gitea_picture.enable_federated_avatar | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
{% endif %}

{% if gitea_project is defined and
      gitea_project | count > 0 %}
[project]
  {% if gitea_project.project_board_basic_kanban_type | count > 0 %}
PROJECT_BOARD_BASIC_KANBAN_TYPE = {{ gitea_project.project_board_basic_kanban_type | join(', ') }}
  {% endif %}
  {% if gitea_project.project_board_bug_triage_type | count > 0 %}
PROJECT_BOARD_BUG_TRIAGE_TYPE = {{ gitea_project.project_board_bug_triage_type | join(', ') }}
  {% endif %}
{% endif %}

{% if gitea_proxy is defined and
      gitea_proxy | count > 0 and
      gitea_proxy.proxy_enabled | bool %}
[proxy]
PROXY_ENABLED = {{ gitea_proxy.proxy_enabled | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if gitea_proxy.proxy_url | default('') | string | length > 0 %}
PROXY_URL = {{ gitea_proxy.proxy_url }}
  {% endif %}
  {% if gitea_proxy.proxy_hosts | count > 0 %}
PROXY_HOSTS = {{ gitea_proxy.proxy_hosts | join(', ') }}
  {% endif %}
{% endif %}

{% if gitea_queue is defined and
      gitea_queue | count > 0 %}
[queue]
  {% set queue_parameters = [
    "type", "datadir", "length", "batch_length", "conn_str", "queue_name", "set_name",
    "wrap_if_necessary", "max_attempts", "timeout", "workers", "max_workers",
    "block_timeout", "boost_timeout", "boost_workers"] %}
  {% set default_queue = gitea_queue.default %}
  {% set gitea_queue = gitea_queue.pop('default') %}
  {% for k, v in default_queue.items() %}
    {% if k in queue_parameters and v | default('') | string | length > 0 %}
{{ k | upper }} = {{ v | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
  {% endfor %}
  {#
    TODO
      Specific queues can be individually configured with [queue.name]. [queue] provides defaults
      ([queue.issue_indexer] is special due to the old configuration described above)
  #}
{% endif %}

{% if gitea_repository is defined and
      gitea_repository | count > 0 %}
[repository]
  {% if gitea_repository.root | default('') | string | length > 0 %}
ROOT = {{ gitea_repository.root }}
  {% endif %}
  {% if gitea_repository.root | default('') | string | length > 0 %}
SCRIPT_TYPE = bash
  {% endif %}
  {% if gitea_repository.detected_charsets_order | count > 0 %}
DETECTED_CHARSETS_ORDER = {{ gitea_repository.detected_charsets_order | join(', ') }} ;;UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, UTF-32LE, ISO-8859, windows-1252, ISO-8859, windows-1250, ISO-8859, ISO-8859, ISO-8859, windows-1253, ISO-8859, windows-1255, ISO-8859, windows-1251, windows-1256, KOI8-R, ISO-8859, windows-1254, Shift_JIS, GB18030, EUC-JP, EUC-KR, Big5, ISO-2022, ISO-2022, ISO-2022, IBM424_rtl, IBM424_ltr, IBM420_rtl, IBM420_ltr
  {% endif %}
  {% if gitea_repository.ansi_charset | default('') | string | length > 0 %}
ANSI_CHARSET = {{ gitea_repository.ansi_charset }}
  {% endif %}
  {% if gitea_repository.force_private | default('') | string | length > 0 %}
FORCE_PRIVATE = {{ gitea_repository.force_private | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.default_private | default('') | string | length > 0 and
        gitea_repository.default_private in ["last", "private", "public"] %}
DEFAULT_PRIVATE = {{ gitea_repository.default_private }}
  {% endif %}
  {% if gitea_repository.default_push_create_private | default('') | string | length > 0 %}
DEFAULT_PUSH_CREATE_PRIVATE = {{ gitea_repository.default_push_create_private | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.max_creation_limit | default('') | string | length > 0 %}
MAX_CREATION_LIMIT = {{ gitea_repository.max_creation_limit }}
  {% endif %}
  {% if gitea_repository.mirror_queue_length | default('') | string | length > 0 %}
;; (DEPRECATED: please use [queue.mirror] LENGTH instead)
MIRROR_QUEUE_LENGTH = {{ gitea_repository.mirror_queue_length }}
  {% endif %}
  {% if gitea_repository.pull_request_queue_length | default('') | string | length > 0 %}
;; (DEPRECATED: please use [queue.pr_patch_checker] LENGTH instead)
PULL_REQUEST_QUEUE_LENGTH = {{ gitea_repository.pull_request_queue_length }}
  {% endif %}
  {% if gitea_repository.preferred_licenses | count > 0 %}
PREFERRED_LICENSES = {{ gitea_repository.preferred_licenses | join (', ') }}
  {% endif %}
  {% if gitea_repository.disable_http_git | default('') | string | length > 0 %}
DISABLE_HTTP_GIT = {{ gitea_repository.disable_http_git | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.access_control_allow_origin | default('') | string | length > 0 %}
ACCESS_CONTROL_ALLOW_ORIGIN = {{ gitea_repository.access_control_allow_origin }}
  {% endif %}
  {% if gitea_repository.use_compat_ssh_uri | default('') | string | length > 0 %}
USE_COMPAT_SSH_URI = {{ gitea_repository.use_compat_ssh_uri | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.disabled_repo_units | count > 0 %}
  {#
      TODO
      allowed values: repo.issues, repo.ext_issues, repo.pulls, repo.wiki, repo.ext_wiki, repo.projects, repo.packages, repo.actions.
  #}
DISABLED_REPO_UNITS = {{ gitea_repository.disabled_repo_units | join(', ') }}
  {% endif %}
  {% if gitea_repository.default_repo_units | count > 0 %}
  {#
      TODO
      allowed values: repo.code, repo.releases, repo.issues, repo.pulls, repo.wiki, repo.projects, repo.packages, repo.actions.
  #}
DEFAULT_REPO_UNITS = {{ gitea_repository.default_repo_units | join(', ') }}
  {% endif %}
  {% if gitea_repository.default_fork_repo_units | count > 0 %}
  {#
      TODO
      the set of allowed values and rules are the same as default_REPO_UNITS.
  #}
  ;; Comma separated list of default forked repo units.
DEFAULT_FORK_REPO_UNITS = {{ gitea_repository.default_fork_repo_units | join(', ') }}
  {% endif %}
  {% if gitea_repository.prefix_archive_files | default('') | string | length > 0 %}
PREFIX_ARCHIVE_FILES = {{ gitea_repository.prefix_archive_files | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.disable_migrations | default('') | string | length > 0 %}
DISABLE_MIGRATIONS = {{ gitea_repository.disable_migrations | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.disable_stars | default('') | string | length > 0 %}
DISABLE_STARS = {{ gitea_repository.disable_stars | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.default_branch | default('') | string | length > 0 %}
DEFAULT_BRANCH = {{ gitea_repository.default_branch }}
  {% endif %}
  {% if gitea_repository.allow_adoption_of_unadopted_repositories | default('') | string | length > 0 %}
ALLOW_ADOPTION_OF_UNADOPTED_REPOSITORIES = {{ gitea_repository.allow_adoption_of_unadopted_repositories | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.allow_deletion_of_unadopted_repositories | default('') | string | length > 0 %}
ALLOW_DELETION_OF_UNADOPTED_REPOSITORIES = {{ gitea_repository.allow_deletion_of_unadopted_repositories | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.disable_download_source_archives | default('') | string | length > 0 %}
DISABLE_DOWNLOAD_SOURCE_ARCHIVES = {{ gitea_repository.disable_download_source_archives | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {% if gitea_repository.allow_fork_without_maximum_limit | default('') | string | length > 0 %}
ALLOW_FORK_WITHOUT_MAXIMUM_LIMIT = {{ gitea_repository.allow_fork_without_maximum_limit | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% endif %}
  {# [repository.editor] #}
  {% if gitea_repository.editor is defined and
        gitea_repository.editor | count > 0 %}

[repository.editor]
    {% if gitea_repository.editor.line_wrap_extensions | count > 0 %}
LINE_WRAP_EXTENSIONS = {{ gitea_repository.editor.line_wrap_extensions | join(', ') }}
    {% endif %}
  {% endif %}
  {# [repository.local] #}
  {% if gitea_repository.local is defined and
        gitea_repository.local | count > 0 %}

[repository.local]
    {% if gitea_repository.local.local_copy_path | default('') | string | length > 0 %}
LOCAL_COPY_PATH = {{ gitea_repository.local.local_copy_path }}
    {% endif %}
  {% endif %}
  {# [repository.upload] #}
  {% if gitea_repository.upload is defined and
        gitea_repository.upload | count > 0 and
        gitea_repository.upload.enabled | bool  %}

[repository.upload]
ENABLED = {{ gitea_repository.upload.enabled | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% if gitea_repository.upload.temp_path | default('') | string | length > 0 %}
TEMP_PATH = {{ gitea_repository.upload.temp_path }}
    {% endif %}
    {% if gitea_repository.upload.allowed_types | count > 0 %}
ALLOWED_TYPES = {{ gitea_repository.upload.allowed_types | joint(', ') }}
    {% endif %}
    {% if gitea_repository.upload.file_max_size | default('') | string | length > 0 %}
FILE_MAX_SIZE = {{ gitea_repository.upload.file_max_size }}
    {% endif %}
    {% if gitea_repository.upload.max_files | default('') | string | length > 0 %}
MAX_FILES = {{ gitea_repository.upload.max_files }}
    {% endif %}
  {% endif %}
  {# [repository.pull-request] #}
  {% if gitea_repository.pull_request is defined and
        gitea_repository.pull_request | count > 0 %}

[repository.pull-request]
    {% if gitea_repository.pull_request.work_in_progress_prefixes | count > 0 %}
WORK_IN_PROGRESS_PREFIXES = {{ gitea_repository.pull_request.work_in_progress_prefixes | join(', ') }}
    {% endif %}
    {% if gitea_repository.pull_request.close_keywords | count > 0 %}
CLOSE_KEYWORDS = {{ gitea_repository.pull_request.close_keywords | join(', ') }}
    {% endif %}
    {% if gitea_repository.pull_request.reopen_keywords | count > 0 %}
REOPEN_KEYWORDS = {{ gitea_repository.pull_request.reopen_keywords | join(', ') }}
    {% endif %}
    {% if gitea_repository.pull_request.default_merge_style | default('') | string | length > 0 and
          gitea_repository.pull_request.default_merge_style in ["merge", "rebase", "rebase-merge", "squash"] %}
DEFAULT_MERGE_STYLE = {{ gitea_repository.pull_request.default_merge_style }}
    {% endif %}
    {% if gitea_repository.pull_request.default_merge_message_commits_limit | default('') | string | length > 0 %}
DEFAULT_MERGE_MESSAGE_COMMITS_LIMIT = {{ gitea_repository.pull_request.default_merge_message_commits_limit }}
    {% endif %}
    {% if gitea_repository.pull_request.default_merge_message_size | default('') | string | length > 0 %}
DEFAULT_MERGE_MESSAGE_SIZE = {{ gitea_repository.pull_request.default_merge_message_size }}
    {% endif %}
    {% if gitea_repository.pull_request.default_merge_message_all_authors | default('') | string | length > 0 %}
DEFAULT_MERGE_MESSAGE_ALL_AUTHORS = {{ gitea_repository.pull_request.default_merge_message_all_authors | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if gitea_repository.pull_request.default_merge_message_max_approvers | default('') | string | length > 0 %}
DEFAULT_MERGE_MESSAGE_MAX_APPROVERS = {{ gitea_repository.pull_request.default_merge_message_max_approvers }}
    {% endif %}
    {% if gitea_repository.pull_request.default_merge_message_official_approvers_only | default('') | string | length > 0 %}
DEFAULT_MERGE_MESSAGE_OFFICIAL_APPROVERS_ONLY = {{ gitea_repository.pull_request.default_merge_message_official_approvers_only | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if gitea_repository.pull_request.add_co_committer_trailers | default('') | string | length > 0 %}
ADD_CO_COMMITTER_TRAILERS = {{ gitea_repository.pull_request.add_co_committer_trailers | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
    {% if gitea_repository.pull_request.test_conflicting_patches_with_git_apply | default('') | string | length > 0 %}
TEST_CONFLICTING_PATCHES_WITH_GIT_APPLY = {{ gitea_repository.pull_request.test_conflicting_patches_with_git_apply | bodsch.core.config_bool(true_as='true', false_as='false') }}
    {% endif %}
  {% endif %}
  {# [repository.issue] #}
  {% if gitea_repository.issue is defined and
        gitea_repository.issue | count > 0 %}

[repository.issue]
    {% if gitea_repository.issue.lock_reasons | count > 0 %}
LOCK_REASONS = {{ gitea_repository.issue.lock_reasons | join(', ') }}
    {% endif %}
  {% endif %}
  {# [repository.release] #}
  {% if gitea_repository.release is defined and
        gitea_repository.release | count > 0 %}

[repository.release]
    {% if gitea_repository.release.allowed_types | count > 0 %}
ALLOWED_TYPES = {{ gitea_repository.release.allowed_types | join(', ') }}
    {% endif %}
    {% if gitea_repository.release.default_paging_num | default('') | string | length > 0 %}
DEFAULT_PAGING_NUM = {{ gitea_repository.release.default_paging_num }}
    {% endif %}
  {% endif %}
  {# [repository.signing] #}
  {% if gitea_repository.signing is defined and
        gitea_repository.signing | count > 0 %}

[repository.signing]
    {% if gitea_repository.signing.signing_key | default('') | string | length > 0 %}
SIGNING_KEY = {{ gitea_repository.signing.signing_key }}
    {% else %}
      {% if gitea_repository.signing.signing_name | default('') | string | length > 0 %}
SIGNING_NAME = {{ gitea_repository.signing.signing_name }}
      {% endif %}
      {% if gitea_repository.signing.signing_email | default('') | string | length > 0 %}
SIGNING_EMAIL = {{ gitea_repository.signing.signing_email }}
      {% endif %}
    {% endif %}
    {% if gitea_repository.signing.default_trust_model | default('') | string | length > 0 and
          gitea_repository.signing.default_trust_model in ["collaborator", "committer", "collaboratorcommitter"] %}
DEFAULT_TRUST_MODEL = {{ gitea_repository.signing.default_trust_model }}
    {% endif %}
    {% if gitea_repository.signing.initial_commit | count > 0 %}
      {% set valid_comit = ["never", "pubkey", "twofa", "always"] %}
      {% set valid_comit = gitea_repository.signing.initial_commit | bodsch.core.compare_list(compare_to_list=valid_comit) %}
INITIAL_COMMIT = {{ valid_comit | join(', ') }}
    {% endif %}
    {% if gitea_repository.signing.crud_actions | default('') | string | length > 0 %}
      {% set valid_actions = ["never", "pubkey", "twofa", "always", "parentsigned"] %}
      {% set valid_actions = gitea_repository.signing.crud_actions | bodsch.core.compare_list(compare_to_list=valid_actions) %}
CRUD_ACTIONS = {{ valid_actions | join(', ') }}
    {% endif %}
    {% if gitea_repository.signing.wiki | count > 0 %}
      {% set valid_wiki = ["never", "pubkey", "twofa", "always"] %}
      {% set valid_wiki = gitea_repository.signing.wiki | bodsch.core.compare_list(compare_to_list=valid_wiki) %}
WIKI = {{ valid_wiki | join(', ') }}
    {% endif %}
    {% if gitea_repository.signing.merges | count > 0 %}
      {% set valid_merges = ["never", "pubkey", "twofa", "always", "basesigned", "commitssigned", "approved"] %}
      {% set valid_merges = gitea_repository.signing.merges | bodsch.core.compare_list(compare_to_list=valid_merges) %}
MERGES = {{ valid_merges | join(', ') }}
    {% endif %}
  {% endif %}
  {# [repository.mimetype_mapping] #}
  {% if gitea_repository.mimetype_mapping is defined and
        gitea_repository.mimetype_mapping | count > 0 %}

[repository.mimetype_mapping]
    {% for k, v in gitea_repository.mimetype_mapping.items() %}
{{ k }} = {{ v }}
    {% endfor %}
  {% endif %}
{% endif %}

{% if gitea_security is defined and
      gitea_security | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[security]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Whether the installer is disabled (set to true to disable the installer)
INSTALL_LOCK = false
;;
;; Global secret key that will be used
;; This key is VERY IMPORTANT. If you lose it, the data encrypted by it (like 2FA secret) can't be decrypted anymore.
SECRET_KEY =
;;
;; Alternative location to specify secret key, instead of this file; you cannot specify both this and SECRET_KEY, and must pick one
;; This key is VERY IMPORTANT. If you lose it, the data encrypted by it (like 2FA secret) can't be decrypted anymore.
;SECRET_KEY_URI = file:/etc/gitea/secret_key
;;
;; Secret used to validate communication within Gitea binary.
INTERNAL_TOKEN=
;;
;; Alternative location to specify internal token, instead of this file; you cannot specify both this and INTERNAL_TOKEN, and must pick one
;INTERNAL_TOKEN_URI = file:/etc/gitea/internal_token
;;
;; How long to remember that a user is logged in before requiring relogin (in days)
;LOGIN_REMEMBER_DAYS = 7
;;
;; Name of the cookie used to store the current username.
;COOKIE_USERNAME = gitea_awesome
;;
;; Name of cookie used to store authentication information.
;COOKIE_REMEMBER_NAME = gitea_incredible
;;
;; Reverse proxy authentication header name of user name, email, and full name
;REVERSE_PROXY_AUTHENTICATION_USER = X-WEBAUTH-USER
;REVERSE_PROXY_AUTHENTICATION_EMAIL = X-WEBAUTH-EMAIL
;REVERSE_PROXY_AUTHENTICATION_FULL_NAME = X-WEBAUTH-FULLNAME
;;
;; Interpret X-Forwarded-For header or the X-Real-IP header and set this as the remote IP for the request
;REVERSE_PROXY_LIMIT = 1
;;
;; List of IP addresses and networks separated by comma of trusted proxy servers. Use `*` to trust all.
;REVERSE_PROXY_TRUSTED_PROXIES = 127.0.0.0/8,::1/128
;;
;; The minimum password length for new Users
;MIN_PASSWORD_LENGTH = 6
;;
;; Set to true to allow users to import local server paths
;IMPORT_LOCAL_PATHS = false
;;
;; Set to false to allow users with git hook privileges to create custom git hooks.
;; Custom git hooks can be used to perform arbitrary code execution on the host operating system.
;; This enables the users to access and modify this config file and the Gitea database and interrupt the Gitea service.
;; By modifying the Gitea database, users can gain Gitea administrator privileges.
;; It also enables them to access other resources available to the user on the operating system that is running the Gitea instance and perform arbitrary actions in the name of the Gitea OS user.
;; WARNING: This maybe harmful to you website or your operating system.
;; WARNING: Setting this to true does not change existing hooks in git repos; adjust it before if necessary.
;DISABLE_GIT_HOOKS = true
;;
;; Set to true to disable webhooks feature.
;DISABLE_WEBHOOKS = false
;;
;; Set to false to allow pushes to gitea repositories despite having an incomplete environment - NOT RECOMMENDED
;ONLY_ALLOW_PUSH_IF_GITEA_ENVIRONMENT_SET = true
;;
;;Comma separated list of character classes required to pass minimum complexity.
;;If left empty or no valid values are specified, the default is off (no checking)
;;Classes include "lower,upper,digit,spec"
;PASSWORD_COMPLEXITY = off
;;
;; Password Hash algorithm, either "argon2", "pbkdf2", "scrypt" or "bcrypt"
;PASSWORD_HASH_ALGO = pbkdf2
;;
;; Set false to allow JavaScript to read CSRF cookie
;CSRF_COOKIE_HTTP_ONLY = true
;;
;; Validate against https://haveibeenpwned.com/Passwords to see if a password has been exposed
;PASSWORD_CHECK_PWN = false
;;
;; Cache successful token hashes. API tokens are stored in the DB as pbkdf2 hashes however, this means that there is a potentially significant hashing load when there are multiple API operations.
;; This cache will store the successfully hashed tokens in a LRU cache as a balance between performance and security.
;SUCCESSFUL_TOKENS_CACHE_SIZE = 20
{% endif %}

{#


{% if gitea_server is defined and
      gitea_server | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[server]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The protocol the server listens on. One of 'http', 'https', 'http+unix', 'fcgi' or 'fcgi+unix'. Defaults to 'http'
;PROTOCOL = http
;;
;; Expect PROXY protocol headers on connections
;USE_PROXY_PROTOCOL = false
;;
;; Use PROXY protocol in TLS Bridging mode
;PROXY_PROTOCOL_TLS_BRIDGING = false
;;
; Timeout to wait for PROXY protocol header (set to 0 to have no timeout)
;PROXY_PROTOCOL_HEADER_TIMEOUT=5s
;;
; Accept PROXY protocol headers with UNKNOWN type
;PROXY_PROTOCOL_ACCEPT_UNKNOWN=false
;;
;; Set the domain for the server
;DOMAIN = localhost
;;
;; Overwrite the automatically generated public URL. Necessary for proxies and docker.
;ROOT_URL = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/
;;
;; when STATIC_URL_PREFIX is empty it will follow ROOT_URL
;STATIC_URL_PREFIX =
;;
;; The address to listen on. Either a IPv4/IPv6 address or the path to a unix socket.
;; If PROTOCOL is set to `http+unix` or `fcgi+unix`, this should be the name of the Unix socket file to use.
;; Relative paths will be made absolute against the _`AppWorkPath`_.
;HTTP_ADDR = 0.0.0.0
;;
;; The port to listen on. Leave empty when using a unix socket.
;HTTP_PORT = 3000
;;
;; If REDIRECT_OTHER_PORT is true, and PROTOCOL is set to https an http server
;; will be started on PORT_TO_REDIRECT and it will redirect plain, non-secure http requests to the main
;; ROOT_URL.  Defaults are false for REDIRECT_OTHER_PORT and 80 for
;; PORT_TO_REDIRECT.
;REDIRECT_OTHER_PORT = false
;PORT_TO_REDIRECT = 80
;;
;; expect PROXY protocol header on connections to https redirector.
;REDIRECTOR_USE_PROXY_PROTOCOL = %(USE_PROXY_PROTOCOL)s
;; Minimum and maximum supported TLS versions
;SSL_MIN_VERSION=TLSv1.2
;SSL_MAX_VERSION=
;;
;; SSL Curve Preferences
;SSL_CURVE_PREFERENCES=X25519,P256
;;
;; SSL Cipher Suites
;SSL_CIPHER_SUITES=; Will default to "ecdhe_ecdsa_with_aes_256_gcm_sha384,ecdhe_rsa_with_aes_256_gcm_sha384,ecdhe_ecdsa_with_aes_128_gcm_sha256,ecdhe_rsa_with_aes_128_gcm_sha256,ecdhe_ecdsa_with_chacha20_poly1305,ecdhe_rsa_with_chacha20_poly1305" if aes is supported by hardware, otherwise chacha will be first.
;;
;; Timeout for any write to the connection. (Set to -1 to disable all timeouts.)
;PER_WRITE_TIMEOUT = 30s
;;
;; Timeout per Kb written to connections.
;PER_WRITE_PER_KB_TIMEOUT = 30s
;;
;; Permission for unix socket
;UNIX_SOCKET_PERMISSION = 666
;;
;; Local (DMZ) URL for Gitea workers (such as SSH update) accessing web service.
;; In most cases you do not need to change the default value.
;; Alter it only if your SSH server node is not the same as HTTP node.
;; Do not set this variable if PROTOCOL is set to 'unix'.
;LOCAL_ROOT_URL = %(PROTOCOL)s://%(HTTP_ADDR)s:%(HTTP_PORT)s/
;;
;; When making local connections pass the PROXY protocol header.
;LOCAL_USE_PROXY_PROTOCOL = %(USE_PROXY_PROTOCOL)s
;;
;; Disable SSH feature when not available
;DISABLE_SSH = false
;;
;; Whether to use the builtin SSH server or not.
;START_SSH_SERVER = false
;;
;; Expect PROXY protocol header on connections to the built-in SSH server
;SSH_SERVER_USE_PROXY_PROTOCOL = false
;;
;; Username to use for the builtin SSH server. If blank, then it is the value of RUN_USER.
;BUILTIN_SSH_SERVER_USER = %(RUN_USER)s
;;
;; Domain name to be exposed in clone URL
;SSH_DOMAIN = %(DOMAIN)s
;;
;; SSH username displayed in clone URLs.
;SSH_USER = %(BUILTIN_SSH_SERVER_USER)s
;;
;; The network interface the builtin SSH server should listen on
;SSH_LISTEN_HOST =
;;
;; Port number to be exposed in clone URL
;SSH_PORT = 22
;;
;; The port number the builtin SSH server should listen on
;SSH_LISTEN_PORT = %(SSH_PORT)s
;;
;; Root path of SSH directory, default is '~/.ssh', but you have to use '/home/git/.ssh'.
;SSH_ROOT_PATH =
;;
;; Gitea will create a authorized_keys file by default when it is not using the internal ssh server
;; If you intend to use the AuthorizedKeysCommand functionality then you should turn this off.
;SSH_CREATE_AUTHORIZED_KEYS_FILE = true
;;
;; Gitea will create a authorized_principals file by default when it is not using the internal ssh server
;; If you intend to use the AuthorizedPrincipalsCommand functionality then you should turn this off.
;SSH_CREATE_AUTHORIZED_PRINCIPALS_FILE = true
;;
;; For the built-in SSH server, choose the ciphers to support for SSH connections,
;; for system SSH this setting has no effect
;SSH_SERVER_CIPHERS = chacha20-poly1305@openssh.com, aes128-ctr, aes192-ctr, aes256-ctr, aes128-gcm@openssh.com, aes256-gcm@openssh.com
;;
;; For the built-in SSH server, choose the key exchange algorithms to support for SSH connections,
;; for system SSH this setting has no effect
;SSH_SERVER_KEY_EXCHANGES = curve25519-sha256, ecdh-sha2-nistp256, ecdh-sha2-nistp384, ecdh-sha2-nistp521, diffie-hellman-group14-sha256, diffie-hellman-group14-sha1
;;
;; For the built-in SSH server, choose the MACs to support for SSH connections,
;; for system SSH this setting has no effect
;SSH_SERVER_MACS = hmac-sha2-256-etm@openssh.com, hmac-sha2-256, hmac-sha1
;;
;; For the built-in SSH server, choose the keypair to offer as the host key
;; The private key should be at SSH_SERVER_HOST_KEY and the public SSH_SERVER_HOST_KEY.pub
;; relative paths are made absolute relative to the %(APP_DATA_PATH)s
;SSH_SERVER_HOST_KEYS=ssh/gitea.rsa, ssh/gogs.rsa
;;
;; Directory to create temporary files in when testing public keys using ssh-keygen,
;; default is the system temporary directory.
;SSH_KEY_TEST_PATH =
;;
;; Path to ssh-keygen, default is 'ssh-keygen' which means the shell is responsible for finding out which one to call.
;SSH_KEYGEN_PATH = ssh-keygen
;;
;; Enable SSH Authorized Key Backup when rewriting all keys, default is true
;SSH_AUTHORIZED_KEYS_BACKUP = true
;;
;; Determines which principals to allow
;; - empty: if SSH_TRUSTED_USER_CA_KEYS is empty this will default to off, otherwise will default to email, username.
;; - off: Do not allow authorized principals
;; - email: the principal must match the user's email
;; - username: the principal must match the user's username
;; - anything: there will be no checking on the content of the principal
;SSH_AUTHORIZED_PRINCIPALS_ALLOW = email, username
;;
;; Enable SSH Authorized Principals Backup when rewriting all keys, default is true
;SSH_AUTHORIZED_PRINCIPALS_BACKUP = true
;;
;; Specifies the public keys of certificate authorities that are trusted to sign user certificates for authentication.
;; Multiple keys should be comma separated.
;; E.g."ssh-<algorithm> <key>". or "ssh-<algorithm> <key1>, ssh-<algorithm> <key2>".
;; For more information see "TrustedUserCAKeys" in the sshd config manpages.
;SSH_TRUSTED_USER_CA_KEYS =
;; Absolute path of the `TrustedUserCaKeys` file gitea will manage.
;; Default this `RUN_USER`/.ssh/gitea-trusted-user-ca-keys.pem
;; If you're running your own ssh server and you want to use the gitea managed file you'll also need to modify your
;; sshd_config to point to this file. The official docker image will automatically work without further configuration.
;SSH_TRUSTED_USER_CA_KEYS_FILENAME =
;;
;; Enable exposure of SSH clone URL to anonymous visitors, default is false
;SSH_EXPOSE_ANONYMOUS = false
;;
;; Timeout for any write to ssh connections. (Set to -1 to disable all timeouts.)
;; Will default to the PER_WRITE_TIMEOUT.
;SSH_PER_WRITE_TIMEOUT = 30s
;;
;; Timeout per Kb written to ssh connections.
;; Will default to the PER_WRITE_PER_KB_TIMEOUT.
;SSH_PER_WRITE_PER_KB_TIMEOUT = 30s
;;
;; Indicate whether to check minimum key size with corresponding type
;MINIMUM_KEY_SIZE_CHECK = false
;;
;; Disable CDN even in "prod" mode
;OFFLINE_MODE = false
;DISABLE_ROUTER_LOG = false
;;
;; TLS Settings: Either ACME or manual
;; (Other common TLS configuration are found before)
;ENABLE_ACME = false
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ACME automatic TLS settings
;;
;; ACME directory URL (e.g. LetsEncrypt's staging/testing URL: https://acme-staging-v02.api.letsencrypt.org/directory)
;; Leave empty to default to LetsEncrypt's (production) URL
;ACME_URL =
;;
;; Explicitly accept the ACME's TOS. The specific TOS cannot be retrieved at the moment.
;ACME_ACCEPTTOS = false
;;
;; If the ACME CA is not in your system's CA trust chain, it can be manually added here
;ACME_CA_ROOT =
;;
;; Email used for the ACME registration service
;; Can be left blank to initialize at first run and use the cached value
;ACME_EMAIL =
;;
;; ACME live directory (not to be confused with ACME directory URL: ACME_URL)
;; (Refer to caddy's ACME manager https://github.com/caddyserver/certmagic)
;ACME_DIRECTORY = https
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Manual TLS settings: (Only applicable if ENABLE_ACME=false)
;;
;; Generate steps:
;; $ ./gitea cert -ca=true -duration=8760h0m0s -host=myhost.example.com
;;
;; Or from a .pfx file exported from the Windows certificate store (do
;; not forget to export the private key):
;; $ openssl pkcs12 -in cert.pfx -out cert.pem -nokeys
;; $ openssl pkcs12 -in cert.pfx -out key.pem -nocerts -nodes
;; Paths are relative to CUSTOM_PATH
;CERT_FILE = https/cert.pem
;KEY_FILE = https/key.pem
;;
;; Root directory containing templates and static files.
;; default is the path where Gitea is executed
;STATIC_ROOT_PATH = ; Will default to the built-in value _`StaticRootPath`_
;;
;; Default path for App data
;APP_DATA_PATH = data ; relative paths will be made absolute with _`AppWorkPath`_
;;
;; Enable gzip compression for runtime-generated content, static resources excluded
;ENABLE_GZIP = false
;;
;; Application profiling (memory and cpu)
;; For "web" command it listens on localhost:6060
;; For "serve" command it dumps to disk at PPROF_DATA_PATH as (cpuprofile|memprofile)_<username>_<temporary id>
;ENABLE_PPROF = false
;;
;; PPROF_DATA_PATH, use an absolute path when you start gitea as service
;PPROF_DATA_PATH = data/tmp/pprof ; Path is relative to _`AppWorkPath`_
;;
;; Landing page, can be "home", "explore", "organizations", "login", or any URL such as "/org/repo" or even "https://anotherwebsite.com"
;; The "login" choice is not a security measure but just a UI flow change, use REQUIRE_SIGNIN_VIEW to force users to log in.
;LANDING_PAGE = home
;;
;; Enables git-lfs support. true or false, default is false.
;LFS_START_SERVER = false
;;
;;
;; LFS authentication secret, change this yourself
LFS_JWT_SECRET =
;;
;; LFS authentication validity period (in time.Duration), pushes taking longer than this may fail.
;LFS_HTTP_AUTH_EXPIRY = 20m
;;
;; Maximum allowed LFS file size in bytes (Set to 0 for no limit).
;LFS_MAX_FILE_SIZE = 0
;;
;; Maximum number of locks returned per page
;LFS_LOCKS_PAGING_NUM = 50
;;
;; Allow graceful restarts using SIGHUP to fork
;ALLOW_GRACEFUL_RESTARTS = true
;;
;; After a restart the parent will finish ongoing requests before
;; shutting down. Force shutdown if this process takes longer than this delay.
;; set to a negative value to disable
;GRACEFUL_HAMMER_TIME = 60s
;;
;; Allows the setting of a startup timeout and waithint for Windows as SVC service
;; 0 disables this.
;STARTUP_TIMEOUT = 0
;;
;; Static resources, includes resources on custom/, public/ and all uploaded avatars web browser cache time. Note that this cache is disabled when RUN_MODE is "dev". Default is 6h
;STATIC_CACHE_TIME = 6h
{% endif %}











{% if gitea_service is defined and
      gitea_service | count > 0 %}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[service]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Time limit to confirm account/email registration
;ACTIVE_CODE_LIVE_MINUTES = 180
;;
;; Time limit to perform the reset of a forgotten password
;RESET_PASSWD_CODE_LIVE_MINUTES = 180
;;
;; Whether a new user needs to confirm their email when registering.
;REGISTER_EMAIL_CONFIRM = false
;;
;; Whether a new user needs to be confirmed manually after registration. (Requires `REGISTER_EMAIL_CONFIRM` to be disabled.)
;REGISTER_MANUAL_CONFIRM = false
;;
;; List of domain names that are allowed to be used to register on a Gitea instance
;; gitea.io,example.com
;EMAIL_DOMAIN_WHITELIST =
;;
;; Comma-separated list of domain names that are not allowed to be used to register on a Gitea instance
;EMAIL_DOMAIN_BLOCKLIST =
;;
;; Disallow registration, only allow admins to create accounts.
;DISABLE_REGISTRATION = false
;;
;; Allow registration only using gitea itself, it works only when DISABLE_REGISTRATION is false
;ALLOW_ONLY_INTERNAL_REGISTRATION = false
;;
;; Allow registration only using third-party services, it works only when DISABLE_REGISTRATION is false
;ALLOW_ONLY_EXTERNAL_REGISTRATION = false
;;
;; User must sign in to view anything.
;REQUIRE_SIGNIN_VIEW = false
;;
;; Mail notification
;ENABLE_NOTIFY_MAIL = false
;;
;; This setting enables gitea to be signed in with HTTP BASIC Authentication using the user's password
;; If you set this to false you will not be able to access the tokens endpoints on the API with your password
;; Please note that setting this to false will not disable OAuth Basic or Basic authentication using a token
;ENABLE_BASIC_AUTHENTICATION = true
;;
;; More detail: https://github.com/gogits/gogs/issues/165
;ENABLE_REVERSE_PROXY_AUTHENTICATION = false
;ENABLE_REVERSE_PROXY_AUTO_REGISTRATION = false
;ENABLE_REVERSE_PROXY_EMAIL = false
;ENABLE_REVERSE_PROXY_FULL_NAME = false
;;
;; Enable captcha validation for registration
;ENABLE_CAPTCHA = false
;;
;; Enable this to require captcha validation for login
;REQUIRE_CAPTCHA_FOR_LOGIN = false
;;
;; Type of captcha you want to use. Options: image, recaptcha, hcaptcha, mcaptcha, cfturnstile.
;CAPTCHA_TYPE = image
;;
;; Change this to use recaptcha.net or other recaptcha service
;RECAPTCHA_URL = https://www.google.com/recaptcha/
;; Enable recaptcha to use Google's recaptcha service
;; Go to https://www.google.com/recaptcha/admin to sign up for a key
;RECAPTCHA_SECRET =
;RECAPTCHA_SITEKEY =
;;
;; For hCaptcha, create an account at https://accounts.hcaptcha.com/login to get your keys
;HCAPTCHA_SECRET =
;HCAPTCHA_SITEKEY =
;;
;; Change this to use demo.mcaptcha.org or your self-hosted mcaptcha.org instance.
;MCAPTCHA_URL = https://demo.mcaptcha.org
;;
;; Go to your configured mCaptcha instance and register a sitekey
;; and use your account's secret.
;MCAPTCHA_SECRET =
;MCAPTCHA_SITEKEY =
;;
;; Go to https://dash.cloudflare.com/?to=/:account/turnstile to sign up for a key
;CF_TURNSTILE_SITEKEY =
;CF_TURNSTILE_SECRET =
;;
;; Default value for KeepEmailPrivate
;; Each new user will get the value of this setting copied into their profile
;DEFAULT_KEEP_EMAIL_PRIVATE = false
;;
;; Default value for AllowCreateOrganization
;; Every new user will have rights set to create organizations depending on this setting
;DEFAULT_ALLOW_CREATE_ORGANIZATION = true
;; Default value for IsRestricted
;; Every new user will have restricted permissions depending on this setting
;DEFAULT_USER_IS_RESTRICTED = false
;;
;; Either "public", "limited" or "private", default is "public"
;; Limited is for users visible only to signed users
;; Private is for users visible only to members of their organizations
;; Public is for users visible for everyone
;DEFAULT_USER_VISIBILITY = public
;;
;; Set which visibility modes a user can have
;ALLOWED_USER_VISIBILITY_MODES = public,limited,private
;;
;; Either "public", "limited" or "private", default is "public"
;; Limited is for organizations visible only to signed users
;; Private is for organizations visible only to members of the organization
;; Public is for organizations visible to everyone
;DEFAULT_ORG_VISIBILITY = public
;;
;; Default value for DefaultOrgMemberVisible
;; True will make the membership of the users visible when added to the organisation
;DEFAULT_ORG_MEMBER_VISIBLE = false
;;
;; Default value for EnableDependencies
;; Repositories will use dependencies by default depending on this setting
;DEFAULT_ENABLE_DEPENDENCIES = true
;;
;; Dependencies can be added from any repository where the user is granted access or only from the current repository depending on this setting.
;ALLOW_CROSS_REPOSITORY_DEPENDENCIES = true
;;
;; Enable heatmap on users profiles.
;ENABLE_USER_HEATMAP = true
;;
;; Enable Timetracking
;ENABLE_TIMETRACKING = true
;;
;; Default value for EnableTimetracking
;; Repositories will use timetracking by default depending on this setting
;DEFAULT_ENABLE_TIMETRACKING = true
;;
;; Default value for AllowOnlyContributorsToTrackTime
;; Only users with write permissions can track time if this is true
;DEFAULT_ALLOW_ONLY_CONTRIBUTORS_TO_TRACK_TIME = true
;;
;; Value for the domain part of the user's email address in the git log if user
;; has set KeepEmailPrivate to true. The user's email will be replaced with a
;; concatenation of the user name in lower case, "@" and NO_REPLY_ADDRESS. Default
;; value is "noreply." + DOMAIN, where DOMAIN resolves to the value from server.DOMAIN
;; Note: do not use the <DOMAIN> notation below
;NO_REPLY_ADDRESS = ; noreply.<DOMAIN>
;;
;; Show Registration button
;SHOW_REGISTRATION_BUTTON = true
;;
;; Show milestones dashboard page - a view of all the user's milestones
;SHOW_MILESTONES_DASHBOARD_PAGE = true
;;
;; Default value for AutoWatchNewRepos
;; When adding a repo to a team or creating a new repo all team members will watch the
;; repo automatically if enabled
;AUTO_WATCH_NEW_REPOS = true
;;
;; Default value for AutoWatchOnChanges
;; Make the user watch a repository When they commit for the first time
;AUTO_WATCH_ON_CHANGES = false
;;
;; Minimum amount of time a user must exist before comments are kept when the user is deleted.
;USER_DELETE_WITH_COMMENTS_MAX_TIME = 0
;; Valid site url schemes for user profiles
;VALID_SITE_URL_SCHEMES=http,https
{% endif %}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Other Settings
;;
;; Uncomment the [section.header] if you wish to
;; set the below settings.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





{% if gitea_cors is defined and
      gitea_cors | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[cors]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; More information about CORS can be found here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers
;; enable cors headers (disabled by default)
;ENABLED = false
;;
;; scheme of allowed requests
;SCHEME = http
;;
;; list of requesting domains that are allowed
;ALLOW_DOMAIN = *
;;
;; allow subdomains of headers listed above to request
;ALLOW_SUBDOMAIN = false
;;
;; list of methods allowed to request
;METHODS = GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS
;;
;; max time to cache response
;MAX_AGE = 10m
;;
;; allow request with credentials
;ALLOW_CREDENTIALS = false
;;
;; headers to permit
;HEADERS = Content-Type,User-Agent
;;
;; set X-FRAME-OPTIONS header
;X_FRAME_OPTIONS = SAMEORIGIN
{% endif %}


{% if gitea_ui is defined and
      gitea_ui | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Number of repositories that are displayed on one explore page
;EXPLORE_PAGING_NUM = 20
;;
;; Number of issues that are displayed on one page
;ISSUE_PAGING_NUM = 20
;;
;; Number of maximum commits displayed in one activity feed
;FEED_MAX_COMMIT_NUM = 5
;;
;; Number of items that are displayed in home feed
;FEED_PAGING_NUM = 20
;;
;; Number of items that are displayed in a single subsitemap
;SITEMAP_PAGING_NUM = 20
;;
;; Number of maximum commits displayed in commit graph.
;GRAPH_MAX_COMMIT_NUM = 100
;;
;; Number of line of codes shown for a code comment
;CODE_COMMENT_LINES = 4
;;
;; Value of `theme-color` meta tag, used by Android >= 5.0
;; An invalid color like "none" or "disable" will have the default style
;; More info: https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android
;THEME_COLOR_META_TAG = `#6cc644`
;;
;; Max size of files to be displayed (default is 8MiB)
;MAX_DISPLAY_FILE_SIZE = 8388608
;;
;; Whether the email of the user should be shown in the Explore Users page
;SHOW_USER_EMAIL = true
;;
;; Set the default theme for the Gitea install
;DEFAULT_THEME = auto
;;
;; All available themes. Allow users select personalized themes regardless of the value of `DEFAULT_THEME`.
;THEMES = auto,gitea,arc-green
;;
;; All available reactions users can choose on issues/prs and comments.
;; Values can be emoji alias (:smile:) or a unicode emoji.
;; For custom reactions, add a tightly cropped square image to public/img/emoji/reaction_name.png
;REACTIONS = +1, -1, laugh, hooray, confused, heart, rocket, eyes
;;
;; Additional Emojis not defined in the utf8 standard
;; By default we support gitea (:gitea:), to add more copy them to public/img/emoji/emoji_name.png and add it to this config.
;; Dont mistake it for Reactions.
;CUSTOM_EMOJIS = gitea, codeberg, gitlab, git, github, gogs
;;
;; Whether the full name of the users should be shown where possible. If the full name isn't set, the username will be used.
;DEFAULT_SHOW_FULL_NAME = false
;;
;; Whether to search within description at repository search on explore page.
;SEARCH_REPO_DESCRIPTION = true
;;
;; Whether to enable a Service Worker to cache frontend assets
;USE_SERVICE_WORKER = false
;;
;; Whether to only show relevant repos on the explore page when no keyword is specified and default sorting is used.
;; A repo is considered irrelevant if it's a fork or if it has no metadata (no description, no icon, no topic).
;ONLY_SHOW_RELEVANT_REPOS = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui.admin]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Number of users that are displayed on one page
;USER_PAGING_NUM = 50
;;
;; Number of repos that are displayed on one page
;REPO_PAGING_NUM = 50
;;
;; Number of notices that are displayed on one page
;NOTICE_PAGING_NUM = 25
;;
;; Number of organizations that are displayed on one page
;ORG_PAGING_NUM = 50

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui.user]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Number of repos that are displayed on one page
;REPO_PAGING_NUM = 15

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui.meta]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;AUTHOR = Gitea - Git with a cup of tea
;DESCRIPTION = Gitea (Git with a cup of tea) is a painless self-hosted Git service written in Go
;KEYWORDS = go,git,self-hosted,gitea

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui.notification]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Control how often the notification endpoint is polled to update the notification
;; The timeout will increase to MAX_TIMEOUT in TIMEOUT_STEPs if the notification count is unchanged
;; Set MIN_TIMEOUT to -1 to turn off
;MIN_TIMEOUT = 10s
;MAX_TIMEOUT = 60s
;TIMEOUT_STEP = 10s
;;
;; This setting determines how often the db is queried to get the latest notification counts.
;; If the browser client supports EventSource and SharedWorker, a SharedWorker will be used in preference to polling notification. Set to -1 to disable the EventSource
;EVENT_SOURCE_UPDATE_TIME = 10s

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui.svg]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Whether to render SVG files as images.  If SVG rendering is disabled, SVG files are displayed as text and cannot be embedded in markdown files as images.
;ENABLE_RENDER = true

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ui.csv]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Maximum allowed file size in bytes to render CSV files as table. (Set to 0 for no limit).
;MAX_FILE_SIZE = 524288
{% endif %}



{% if gitea_ssh is defined and
      gitea_ssh | count > 0 %}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[ssh.minimum_key_sizes]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Define allowed algorithms and their minimum key length (use -1 to disable a type)
;ED25519 = 256
;ECDSA = 256
;RSA = 2047 ; we allow 2047 here because an otherwise valid 2048 bit RSA key can be reported as having 2047 bit length
;DSA = -1 ; set to 1024 to switch on
{% endif %}











{% if gitea_webhook is defined and
      gitea_webhook | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[webhook]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Hook task queue length, increase if webhook shooting starts hanging
;QUEUE_LENGTH = 1000
;;
;; Deliver timeout in seconds
;DELIVER_TIMEOUT = 5
;;
;; Webhook can only call allowed hosts for security reasons. Comma separated list, eg: external, 192.168.1.0/24, *.mydomain.com
;; Built-in: loopback (for localhost), private (for LAN/intranet), external (for public hosts on internet), * (for all hosts)
;; CIDR list: 1.2.3.0/8, 2001:db8::/32
;; Wildcard hosts: *.mydomain.com, 192.168.100.*
;; Since 1.15.7. Default to * for 1.15.x, external for 1.16 and later
;ALLOWED_HOST_LIST = external
;;
;; Allow insecure certification
;SKIP_TLS_VERIFY = false
;;
;; Number of history information in each page
;PAGING_NUM = 10
;;
;; Proxy server URL, support http://, https//, socks://, blank will follow environment http_proxy/https_proxy
;PROXY_URL =
;;
;; Comma separated list of host names requiring proxy. Glob patterns (*) are accepted; use ** to match all hosts.
;PROXY_HOSTS =
{% endif %}



{% if gitea_email is defined and
      gitea_email | count > 0 %}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[email.incoming]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Enable handling of incoming emails.
;ENABLED = false
;;
;; The email address including the %{token} placeholder that will be replaced per user/action.
;; Example: incoming+%{token}@example.com
;; The placeholder must appear in the user part of the address (before the @).
;REPLY_TO_ADDRESS =
;;
;; IMAP server host
;HOST =
;;
;; IMAP server port
;PORT =
;;
;; Username of the receiving account
;USERNAME =
;;
;; Password of the receiving account
;PASSWORD =
;;
;; Whether the IMAP server uses TLS.
;USE_TLS = false
;;
;; If set to true, completely ignores server certificate validation errors. This option is unsafe.
;SKIP_TLS_VERIFY = true
;;
;; The mailbox name where incoming mail will end up.
;MAILBOX = INBOX
;;
;; Whether handled messages should be deleted from the mailbox.
;DELETE_HANDLED_MESSAGE = true
;;
;; Maximum size of a message to handle. Bigger messages are ignored. Set to 0 to allow every size.
;MAXIMUM_MESSAGE_SIZE = 10485760
{% endif %}


{% if gitea_session is defined and
      gitea_session | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[session]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Either "memory", "file", "redis", "db", "mysql", "couchbase", "memcache" or "postgres"
;; Default is "memory". "db" will reuse the configuration in [database]
;PROVIDER = memory
;;
;; Provider config options
;; memory: doesn't have any config yet
;; file: session file path, e.g. `data/sessions`
;; redis: `redis://127.0.0.1:6379/0?pool_size=100&idle_timeout=180s`
;; mysql: go-sql-driver/mysql dsn config string, e.g. `root:password@/session_table`
;PROVIDER_CONFIG = data/sessions ; Relative paths will be made absolute against _`AppWorkPath`_.
;;
;; Session cookie name
;COOKIE_NAME = i_like_gitea
;;
;; If you use session in https only, default is false
;COOKIE_SECURE = false
;;
;; Session GC time interval in seconds, default is 86400 (1 day)
;GC_INTERVAL_TIME = 86400
;;
;; Session life time in seconds, default is 86400 (1 day)
;SESSION_LIFE_TIME = 86400
;;
;; SameSite settings. Either "none", "lax", or "strict"
;SAME_SITE=lax
{% endif %}





{% if gitea_attachment is defined and
      gitea_attachment | count > 0 %}

{% endif %}


{% if gitea_time is defined and
      gitea_time | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[time]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Specifies the format for fully outputted dates. Defaults to RFC1123
;; Special supported values are ANSIC, UnixDate, RubyDate, RFC822, RFC822Z, RFC850, RFC1123, RFC1123Z, RFC3339, RFC3339Nano, Kitchen, Stamp, StampMilli, StampMicro and StampNano
;; For more information about the format see http://golang.org/pkg/time/#pkg-constants
;FORMAT =
;;
;; Location the UI time display i.e. Asia/Shanghai
;; Empty means server's location setting
;DEFAULT_UI_LOCATION =
{% endif %}








{% if gitea_hightlight is defined and
      gitea_hightlight | count > 0 %}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[highlight.mapping]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Extension mapping to highlight class
;; e.g. .toml=ini
{% endif %}












{% if gitea_task is defined and
      gitea_task | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[task]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Task queue type, could be `channel` or `redis`.
;QUEUE_TYPE = channel
;;
;; Task queue length, available only when `QUEUE_TYPE` is `channel`.
;QUEUE_LENGTH = 1000
;;
;; Task queue connection string, available only when `QUEUE_TYPE` is `redis`.
;; If there is a password of redis, use `redis://127.0.0.1:6379/0?pool_size=100&idle_timeout=180s`.
;QUEUE_CONN_STR = "redis://127.0.0.1:6379/0?pool_size=100&idle_timeout=180s"
{% endif %}











{% if gitea_storage is defined and
      gitea_storage | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; default storage for attachments, lfs and avatars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[storage]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; storage type
;STORAGE_TYPE = local

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings for repository archives, will override storage setting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[storage.repo-archive]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; storage type
;STORAGE_TYPE = local

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings for packages, will override storage setting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[storage.packages]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; storage type
;STORAGE_TYPE = local

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; customize storage
;[storage.my_minio]
;STORAGE_TYPE = minio
;;
;; Minio endpoint to connect only available when STORAGE_TYPE is `minio`
;MINIO_ENDPOINT = localhost:9000
;;
;; Minio accessKeyID to connect only available when STORAGE_TYPE is `minio`
;MINIO_ACCESS_KEY_ID =
;;
;; Minio secretAccessKey to connect only available when STORAGE_TYPE is `minio`
;MINIO_SECRET_ACCESS_KEY =
;;
;; Minio bucket to store the attachments only available when STORAGE_TYPE is `minio`
;MINIO_BUCKET = gitea
;;
;; Minio location to create bucket only available when STORAGE_TYPE is `minio`
;MINIO_LOCATION = us-east-1
;;
;; Minio enabled ssl only available when STORAGE_TYPE is `minio`
;MINIO_USE_SSL = false
;;
;; Minio skip SSL verification available when STORAGE_TYPE is `minio`
;MINIO_INSECURE_SKIP_VERIFY = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings for action logs, will override storage setting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;[storage.actions_log]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; storage type
;STORAGE_TYPE = local


{% endif %}

{% if gitea_lfs is defined and
      gitea_lfs | count > 0 %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; lfs storage will override storage
;;
;[lfs]
;STORAGE_TYPE = local
;;
;; Where your lfs files reside, default is data/lfs.
;PATH = data/lfs


{% endif %}





#}
